trigger:
  batch: true
  branches:
    include:
      - master
  tags:
    include:
      - '*'
  paths:
    include:
      - src/*
      - tests/*
      - $(projectName).sln

pool:
  vmImage: "ubuntu-latest"

variables:
  solutionPath: "$(projectName).sln"
  projectPath: "src/$(projectName)/$(projectName).csproj"
  buildConfiguration: "Release"
  major: 1
  minor: 0
  patch: 2

stages:
  - stage: stage_create_package
    displayName: Create Nuget package
    jobs:
      - job: job_create_package
        displayName: Create Nuget package
        variables:
          suffix: $[counter(format('{0}.{1}.{2}', variables.major, variables.minor, variables.patch), 1)]
          previewPadded: $[format('-{0}0{1}', 'preview', variables['suffix'])]
          previewUnpadded: $[format('-{0}{1}', 'preview', variables['suffix'])]
          packageVersion: $(major).$(minor).$(patch)$(previewSuffix)
          isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
          isTag: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/')]
        steps:
          - script: TMP=$(echo $(previewPadded)) && echo "##vso[task.setvariable variable=previewSuffix]$TMP"
            displayName: Use padded suffix
            condition: and(gt(10, variables.suffix), eq(variables.isMain, false))
          - script: TMP=$(echo $(previewUnpadded)) && echo "##vso[task.setvariable variable=previewSuffix]$TMP"
            displayName: Use unpadded suffix
            condition: and(le(10, variables.suffix), eq(variables.isMain, false))
          - script: TMP=$(echo '') && echo "##vso[task.setvariable variable=previewSuffix]$TMP"
            displayName: No suffix
            condition: or(eq(variables.isTag, true), eq(variables.isMain, true))
          - script: echo Version => $(packageVersion)
            displayName: Show version number
            condition: or(eq(variables.isTag, true), eq(variables.isMain, false))
          - task: DotNetCoreCLI@2
            displayName: Restore Nuget packages
            inputs:
              command: restore
              projects: $(projectPath)
              feedsToUse: "config"
              nugetConfigPath: "nuget.config"
          - task: DotNetCoreCLI@2
            displayName: Test
            inputs:
              command: test
              projects: $(solutionPath)
          - task: DotNetCoreCLI@2
            displayName: Create Nuget package
            inputs:
              command: pack
              configurationToPack: "$(buildConfiguration)"
              packagesToPack: "$(projectPath)"
              versioningScheme: byEnvVar
              versionEnvVar: packageVersion
            condition: or(eq(variables.isTag, true), eq(variables.isMain, false))
          - task: DotNetCoreCLI@2
            displayName: Push Nuget package
            inputs:
              command: push
              packagesToPush: "$(Build.ArtifactStagingDirectory)/*.nupkg"
              vstsFeed: "contactcentre"
              publishVstsFeed: "contactcentre"
              nobuild: true
            condition: or(eq(variables.isTag, true), eq(variables.isMain, false))